# -*- coding: utf-8 -*-
"""Copy of fashion_mnist_cnn_Image Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1If51q4Sd5bRwFICYSIwVVni5Mp-bVs2m
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

mnist = tf.keras.datasets.mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
#Load and Preprocess Data

train_images, test_images = train_images / 255.0, test_images / 255.0
##Download the MNIST dataset:

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),  # Input layer
    tf.keras.layers.Dense(128, activation='relu'),  # Hidden layer
    tf.keras.layers.Dense(10)  # Output layer (10 classes)
])
#Build the model

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
#compile the model

model.fit(train_images, train_labels, epochs=10)
#Train the model

test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print("\nTest accuracy:", test_acc)
#Evaluate the model

probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_images)
#make prediction

import numpy as np
print("Predicted label:", np.argmax(predictions[0]))  # First image
#Check the predicted class for an image:

plt.imshow(test_images[0], cmap=plt.cm.binary)  # Show the first image
plt.xlabel(f"Predicted: {np.argmax(predictions[0])}")
plt.show()
#visualizing the prediction